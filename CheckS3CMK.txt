import botocore
import boto3
import json

s3 = boto3.client("s3")
config = boto3.client('config')

APPLICABLE_RESOURCES = ["AWS::S3::Bucket"]

def evaluate_compliance(configuration_item):

    # Start as non-compliant
    compliance_type = 'NON_COMPLIANT'
    annotation = "S3 bucket either does NOT have default encryption enabled, " \
                 + "has the wrong TYPE of encryption enabled, or is encrypted " \
                 + "with the wrong KMS key."

    # Check if resource was deleted
    if configuration_item['configurationItemStatus'] == "ResourceDeleted":
        compliance_type = 'NOT_APPLICABLE'
        annotation = "The resource was deleted."

    # Check resource for applicability
    elif configuration_item["resourceType"] not in APPLICABLE_RESOURCES:
        compliance_type = 'NOT_APPLICABLE'
        annotation = "The rule doesn't apply to resources of type " \
                     + configuration_item["resourceType"] + "."

    # Check bucket for default encryption
    else:
        try:
            # Encryption isn't in configurationItem so an API call is necessary
            response = s3.get_bucket_encryption(
                Bucket=configuration_item["resourceName"]
            )

            if response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['SSEAlgorithm'] == 'aws:kms':
                compliance_type = 'COMPLIANT'
                annotation = 'S3 bucket is encrypted with a CMK.'
            else:
                compliance_type = 'NON_COMPLIANT'
                annotation = 'S3 bucket is NOT encrypted with a CMK.'
        except botocore.exceptions.ClientError as err:
            print(err)
            # If we receive an error, the default encryption flag is not set
            compliance_type = 'NON_COMPLIANT'
            annotation = 'S3 bucket does NOT have default encryption enabled.'

    return {
        "compliance_type": compliance_type,
        "annotation": annotation
    }

def lambda_handler(event, context):

    invoking_event = json.loads(event['invokingEvent'])

    # Check for oversized item
    if "configurationItem" in invoking_event:
        configuration_item = invoking_event["configurationItem"]
    elif "configurationItemSummary" in invoking_event:
        configuration_item = invoking_event["configurationItemSummary"]

    evaluation = evaluate_compliance(configuration_item)

    print('Compliance evaluation for %s: %s' % (configuration_item['resourceId'], evaluation["compliance_type"]))
    print('Annotation: %s' % (evaluation["annotation"]))

    response = config.put_evaluations(
       Evaluations=[
           {
               'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
               'ComplianceResourceId':   invoking_event['configurationItem']['resourceId'],
               'ComplianceType':         evaluation["compliance_type"],
               "Annotation":             evaluation["annotation"],
               'OrderingTimestamp':      invoking_event['configurationItem']['configurationItemCaptureTime']
           },
       ],
       ResultToken=event['resultToken'])
